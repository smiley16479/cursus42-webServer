# Cheminement du WebServ de Qingqingqingli

check des arguments (l.18 main)
commencement de l'exécution du server (l.23 main) :
-Amorçage de SIGINT pour quité le programme
-Vérification du fichier de configuration (f():load_configuration webserver.cpp l.23) # Vérification des block du fichier de config (f():check_server_block l.4 check_functions.cpp) # Création du server correspondant (f():create_new_server server.cpp l.22) # Ajout du server au vector membre de l'objet webserver
-Validation de la configuration du server (f():validate_configuration webserver.cpp l.51) # Vérification des attributs des servers
-Etablissement de la connexion (f():establish_connection webserver.cpp l.73) # Création de socket ... # Liason des ports ... # Création de la connexion ...
-Lancement du server (f():run webserver.cpp l.83) # Récupération du socket max avant le while(1) (f():initialize_max file_descriptors.cpp l.25) # Ajout des fd au set de lecture '\_read' (f():synchronize file_descriptors.cpp l.16) # Select() des socket prêts à la lecture ou à l'écriture (webserver.cpp l.91) # Loop (for) sur chacun des server -qui prends quasiment tout le reste de la fonction # Si le socket est pret pour la lecture (f():rdy_for_reading file_descriptors.cpp l.132)
-On créer le fd qui sera utilisé pour la lecture (f():accept l.100)
-On set son flag avec fcntl (f():fcntl l.103)
-On set son timeOut (f():set_time_out(int fd) file_descriptors.cpp l.144)
-Ajout du newFD au set de lecture '\_read_Buffer' cette fois (f():accepted_request_update(int activeFD) file_descriptors l.40)
-Ajout du 'client' au vector membre de 'server' (l.107)
-S'il n'y a q'un seul élément (client)
+On set son status actif à l'aide de son booléen membre \_active (l.110)

# Loop (for) sur chacun des clients du server

# block try : on set le membre (bool)\_time_out_check de l'objet webserver

# Si le socket est pret pour la lecture (f():rdy_for_reading file_descriptors.cpp l.132) --> //handle requested file l.121

    -On lit la requete (f():read_browser_request parse_function.cpp l.66)
    -Si le hearder de la précédente requete n'est pas vide
      +On raffraichi le _time_out_check et on le set à nouveau (f():set_time_out(int fd) file_descriptors.cpp l.144)
    -Si le hearder de la précédente requete n'est pas vide ET que le buffer de requete est valid
      +On parse la requete (f():parse_request(request_buf request_buffer) header_handler.cpp l.43)
      +On remove son header (f():remove_handled_request(int used_fd) server.cpp l.110 )
      +On set le _fileFD du client courant (f():handle_request(...) header_handler l.216)
      +On update le fd de la request ds le bon set (f():handled_request_update file_descriptors.cpp l.45)
      +Si on trouve une cgi 'server->_cgi_file_types.find()', valide
        =On créé un FD "input" pour la cgi
        =On ajoute ce FD au set _write_buffer (f():set_write_buffer file_descriptors.cpp l.118)
        =On update le fd maximal (f():update_max file_descriptors.cpp l.32)
    -Si le socket est pret pour la lecture (f():rdy_for_reading file_descriptors.cpp l.132) --> //read requested file l.142
      +Si le socket est pret pour l'écriture (f():rdy_for_writing file_descriptors.cpp l.137)
        =S'il y a de la place pour écrire <- on fait un continue à la fin de la condition |
          ~Si le type de cgi correspond à ceux que l'on sait gérer -> On execute les cgi
          ~Sinon on écrit la request dans son fichier attitré
          ~Si la taille du body == 0 on set le status booléen _write_to_file à true | continue;
        =On set les _bytes_written à 0, le _write_to_file status à true et le _time_out_check à false
      +Si le status du client est != de No Content (204) et que le set/read_from file (UTILITÉ A CERNER)
        =Si le content demande des cgi et la méthode est un POST on execute les cgi |
        =Sinon on lit le fichier demandé |
        =(sauf si continue) On set les _bytes_read à 0, le _read_from_file status à true et le _time_out_check à false
      +On update de status de la requete de lecture (l.172-174)
    -Si le socket est pret pour l'écriture (f():rdy_for_writing file_descriptors.cpp l.137)  //send response
      +Si on a rien écrit on créer la réponse
    -On envoie la réponse
    -Si la longeur de la réponse formulé est < que la taille de la réponse demandée on -> continue; Wtf ?
    -Sinon on update de status de la requete de lecture (l.187-192) et on affiche le statut sur cout
    -Si on fait un _time_out_check on enlève le clien de la liste ? et check_time_out

# On met à jour le FD max
